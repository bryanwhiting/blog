<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Bryan Whiting</title>
<link>https://www.bryanwhiting.com/tech.html</link>
<atom:link href="https://www.bryanwhiting.com/tech.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sat, 07 Sep 2024 14:04:18 GMT</lastBuildDate>
<item>
  <title>Tracing</title>
  <link>https://www.bryanwhiting.com/tech/tracing.html</link>
  <description><![CDATA[ 





<p>“Tell her you traced that”</p>
<p>my daughter had just asked me if I drew this. I said yes. But I omitted some details.</p>
<p>What does it matter I traced it? I wanted a picture that didn’t look like two potatos.</p>
<p>Nowadays, the question of: “did you draw that” and “did you actually write that” will perhaps become more relevant.</p>
<p>I’ve never coded without using Google. Now I don’t code without AI. Is that cheating? Am I tracing??</p>
<p>Ultimately, nobody cares how it was made. Just that it was made to spec.</p>
<p>Similarly, a relative likes to bow hunt. Why? It’s more fun than a rifle. More of a challenge.</p>
<p>I didn’t want a challenge. I wanted a better drawing. So I traced.</p>
<p>In the future, we’ll still write “by hand”. But not to create a great product. But because it’s meaningful to experience as a human.</p>
<p><img src="https://www.bryanwhiting.com/img2024-09-07-1409-drawing-of-wife.png" class="img-fluid"></p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/tracing.html</guid>
  <pubDate>Sat, 07 Sep 2024 14:04:18 GMT</pubDate>
</item>
<item>
  <title>Just a few lines of code</title>
  <link>https://www.bryanwhiting.com/tech/just-a-few-lines-of-code.html</link>
  <description><![CDATA[ 





<p>Anytime anyone tells you “it’s been simplified to a few lines of code”, that always means it’s several thousand lines of code hidden in the closet. You inherit both when using the solution with just a few lines of code.</p>
<p>Some things can’t easily be abstracted.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/just-a-few-lines-of-code.html</guid>
  <pubDate>Wed, 04 Sep 2024 14:05:46 GMT</pubDate>
</item>
<item>
  <title>Don’t trust a cloud provider</title>
  <link>https://www.bryanwhiting.com/tech/dont-trust-a-cloud-provider.html</link>
  <description><![CDATA[ 





<p>Never trust a cloud provider to do compute for you, like AmazonForecast. (Or LLM tuning?)</p>
<p>Amazon will charge $1440, take 4.1 hours, and have an accuracy 3x worse than using an open source Nixtla, which cost $1.20, took 15 minutes and had an accuracy metric 1/3 the Amazon service offered (lower accuracy is good in this case.)</p>
<p>Where else are cloud providers ripping you off?</p>
<p>https://nixtlaverse.nixtla.io/statsforecast/docs/experiments/amazonstatsforecast.html</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/dont-trust-a-cloud-provider.html</guid>
  <pubDate>Mon, 19 Aug 2024 11:16:03 GMT</pubDate>
</item>
<item>
  <title>Chicken Nugget A B testing</title>
  <link>https://www.bryanwhiting.com/tech/chicken-nugget-a-b-testing.html</link>
  <description><![CDATA[ 





<p>Why cutting chicken nuggets for my 2y old is an optimization problem, and how social media companies use these principles:</p>
<p>Objective: maximize my 2 year olds caloric intake</p>
<ul>
<li><p>Inputs: chicken nugget size.</p></li>
<li><p>Cut two nuggets four ways: 8 pieces.</p></li>
<li><p>Cut two nuggets two ways: 4 pieces.</p></li>
</ul>
<p>Will the kid eat 5 small pieces or 3 big ones?</p>
<p>On one hand, he eats 62.5% of nuggets. On the other, 75%. But maybe he only eats two halves - that drops him to 50% consumption.</p>
<hr>
<p>What gets you watching one more YouTube, one more Spotify song, one more TikTok? One more LinkedIn post?</p>
<p>Do people sign off after 5 posts? One post? If we slide a video into the fifth spot after the first four posts, do they engage? If they engage with the video do they come back tomorrow or in a week?</p>
<p>Everything’s an optimization. Even cutting nuggets. Your mind just does this subconsciously.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>A/B testing</category>
  <guid>https://www.bryanwhiting.com/tech/chicken-nugget-a-b-testing.html</guid>
  <pubDate>Sat, 17 Aug 2024 12:40:20 GMT</pubDate>
</item>
<item>
  <title>Forget Pythonic. Write code that works</title>
  <link>https://www.bryanwhiting.com/tech/forget-pythonic-write-code-that-works.html</link>
  <description><![CDATA[ 





<p>For the Python nerds: I’ve seen data scientists bashing notebooks for years. I was one of them.</p>
<p>Then I learned yesterday about nbdev and how Jeremy Howard and folks at Nixtla are building production grade software using…notebooks.</p>
<p>I was taken aback by Jeremy’s YouTube “I don’t write code like most Python programmers, but I have a reason for how I write it”.</p>
<p>I was also shocked how easy it was to read Nixtla’s documentation and source code. Shouldn’t that be the goal??</p>
<p>Unit tests at the bottom of the Python files where the functions are defined. Wait…that makes a ton of sense.</p>
<p>Wirh nbdev there’s no major emphasis on pep8. No black formatting. No like wrap at 80 characters.</p>
<p>And I realized: we put so much emphasis on convention and doing what others are doing.</p>
<p>I’m not saying pep8 or black are wrong. I like them. But Python is just a language. Don’t get sucked into “being pythonic”. If the code works, and it creates value, it serves its purpose.</p>
<p>I come from R where there are so many “dialects”. Compare base R vs the tidyverse. Worlds apart in how they build and test their code.</p>
<p>So…make your own dialect. Just don’t waste time trying to keep up with all the formatters and linters out there. Because who cares? It’s your code.</p>
<p>It’s okay to have you or your team have your own style.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/forget-pythonic-write-code-that-works.html</guid>
  <pubDate>Thu, 01 Aug 2024 16:21:00 GMT</pubDate>
</item>
<item>
  <title>Schema Markup video</title>
  <link>https://www.bryanwhiting.com/tech/schema-markup-video.html</link>
  <description><![CDATA[ 





<p>https://youtu.be/8z_KQv2vBpM?si=vjVztfIe5RCx3M-c</p>
<ul>
<li><p>Duda has a plugin to do this</p></li>
<li><p>Every blog post has article schema</p></li>
<li><p>Merkle website: technicalSeo.com</p></li>
<li><p>Rich text results to test the schema markup</p></li>
<li><p>Create breadcrumbs for your site. A nice hierarchy is more scrapabke.</p></li>
<li><p><a href="https://developer.duda.co/docs/local-business-schema">Duda Local Business Schema</a></p></li>
</ul>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/schema-markup-video.html</guid>
  <pubDate>Wed, 03 Jul 2024 23:02:06 GMT</pubDate>
</item>
<item>
  <title>Mojo programming language</title>
  <link>https://www.bryanwhiting.com/tech/mojo-programming-language.html</link>
  <description><![CDATA[ 





<p>Someone decided to create Python syntax but with type checking built in.</p>
<p><a href="https://docs.modular.com/mojo/manual/basics">Introduction to Mojo | Modular Docs</a></p>
<p>Python look and feel, but much faster.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/mojo-programming-language.html</guid>
  <pubDate>Fri, 17 May 2024 21:53:38 GMT</pubDate>
</item>
<item>
  <title>Pinball Loss</title>
  <link>https://www.bryanwhiting.com/tech/pinball-loss.html</link>
  <description><![CDATA[ 





<p>I just learned about Pinball Loss: <a href="https://mindfulmodeler.substack.com/p/how-i-made-peace-with-quantile-regression">How I made peace with quantile regression</a></p>
<p>Essentially, it’s a loss function that penalizes over vs under predictions. It can be used to help perform quantile regression and bias the predictions over or under the mean (which is what quantile regression does).</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.bryanwhiting.com/img/screenshot-pinball-loss-molnar.jpeg" class="preview-image img-fluid figure-img"></p>
<figcaption class="margin-caption">Loss</figcaption>
</figure>
</div>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/pinball-loss.html</guid>
  <pubDate>Wed, 01 May 2024 21:07:02 GMT</pubDate>
</item>
<item>
  <title>News Notes for 2024-04-19</title>
  <link>https://www.bryanwhiting.com/news/2024-04-19-news-notes.html</link>
  <description><![CDATA[ 





<p><a href="https://lightning.ai/lightning-ai/studios/rag-using-llama-3-by-meta-ai">RAG using Llama 3 by Meta AI - a Lightning Studio by akshay</a></p>
<ul>
<li>build your own rag</li>
<li>Serve in custom cloud infrastructure</li>
</ul>
<p><a href="https://groq.com/">GroqChat</a></p>
<ul>
<li>groq does up to 800 t/s</li>
</ul>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>news</category>
  <guid>https://www.bryanwhiting.com/news/2024-04-19-news-notes.html</guid>
  <pubDate>Fri, 19 Apr 2024 21:02:05 GMT</pubDate>
</item>
<item>
  <title>Quivr App, Reader API, Zed</title>
  <link>https://www.bryanwhiting.com/news/quivr-app-reader-api-zed.html</link>
  <description><![CDATA[ 





<p>Every day I learn something new about the AI space. Today it’s quivr and reader and zed.</p>
<section id="quivr" class="level1">
<h1>Quivr</h1>
<ul>
<li>Built on langchain</li>
<li>Upload any data</li>
<li>Chat with it locally</li>
</ul>
<p>https://www.quivr.app/</p>
<p><a href="https://www.quivr.app/">Quivr - Open source chat-powered second brains</a></p>
<ul>
<li><a href="https://github.com/QuivrHQ/quivr">GitHub - QuivrHQ/quivr: Your GenAI Second Brain 🧠 A personal productivity assistant (RAG) ⚡️🤖 Chat with your docs (PDF, CSV, …) &amp; apps using Langchain, GPT 3.5 / 4 turbo, Private, Anthropic, VertexAI, Ollama, LLMs, Groq that you can share with users ! Local &amp; Private alternative to OpenAI GPTs &amp; ChatGPT powered by retrieval-augmented generation.</a></li>
</ul>
<p>Demo video:</p>
<p><a href="https://github-production-user-asset-6210df.s3.amazonaws.com/19614572/239713902-a6463b73-76c7-4bc0-978d-70562dca71f5.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAVCODYLSA53PQK4ZA%2F20240418%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20240418T033014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=459d14a6f72dee009b2afe5d8c81ed68c18284b3c4f90a303605bf6e2b495bea&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=640079149">https://github-production-user-asset-6210df.s3.amazonaws.com/19614572/239713902-a6463b73-76c7-4bc0-978d-70562dca71f5.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAVCODYLSA53PQK4ZA%2F20240418%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20240418T033014Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=459d14a6f72dee009b2afe5d8c81ed68c18284b3c4f90a303605bf6e2b495bea&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=640079149</a></p>
</section>
<section id="reader-api" class="level1">
<h1>Reader API</h1>
<p><a href="https://jina.ai/reader/">Reader API</a></p>
<ul>
<li>converts any web page into a markdown-friendly format from HTML, allowing you to use much cleaner data in you LLM</li>
<li>How is it free?</li>
</ul>
<p>Here’s my Silvermine AI website</p>
<p><a href="https://r.jina.ai/https://www.silvermineai.com">www.silvermineai.com</a></p>
</section>
<section id="zed-code-esitor" class="level1">
<h1>Zed Code esitor</h1>
<p><a href="https://github.com/zed-industries/zed">GitHub - zed-industries/zed: Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.</a></p>
<p><a href="https://zed.dev/">Zed - Code at the speed of thought</a></p>
<ul>
<li>atom developers created a more powerful, AI-infused (GitHub copilot), with collaboration at its core.</li>
<li>Faster bc built in rust?</li>
</ul>
<p>Review</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/zHRcz5G04fk?si=na5aj_IWDpZNZMGt" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>


</section>

<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>news</category>
  <category>ai tools</category>
  <guid>https://www.bryanwhiting.com/news/quivr-app-reader-api-zed.html</guid>
  <pubDate>Wed, 17 Apr 2024 20:28:32 GMT</pubDate>
</item>
<item>
  <title>Microsoft Copilot notes</title>
  <link>https://www.bryanwhiting.com/tech/microsoft-copilot-notes.html</link>
  <description><![CDATA[ 





<p>Three copilots:</p>
<ul>
<li>copilot.Microsoft.com</li>
</ul>
<p><a href="https://youtu.be/3Nb0FEe3kKw?si=Q8A2T101zA9pxx1B">YouTube MS ignite</a></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/3Nb0FEe3kKw?si=Q8A2T101zA9pxx1B" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li>uses RAG on the Microsoft graph</li>
<li>Copilot can make a PowerPoint from a Doc</li>
<li>TeamsKit</li>
<li>plugins and graph connectors. Maybe plugin is right? Maybe graph connector is right.</li>
<li>Not very useful PowerPoints unless tied to data</li>
<li>LLMs are only as accurate as the data.</li>
</ul>
<p><a href="https://youtu.be/7JRaFAYSOgI?si=9NrnsVCO0rGrlAHh">YouTube create awesome documents</a></p>
<ul>
<li>Edit and revise</li>
</ul>
<p><a href="https://youtu.be/_nf56aMPdZE?si=Z6UR5qKPOvKb4y4d">YouTube | Excel tutorial</a></p>
<ul>
<li>20-30 second</li>
</ul>
<p><a href="https://youtu.be/AhywEEHg6Es?si=PDLQGwIJgaBxivbz">YouTube | MS Cop featurs</a></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.bryanwhiting.com/img/screenshot-write-speech-from-doc.jpeg" class="preview-image img-fluid figure-img"></p>
<figcaption class="margin-caption">Write speech</figcaption>
</figure>
</div>
<p><a href="https://youtu.be/oYijejDXLZQ?si=J-08luV6mNJPEgIU">YouTube | Microsoft Loop is cool</a></p>
<ul>
<li>loop is cool. Makes collaborating across applications on a single thing easy.</li>
</ul>
<p><a href="https://youtu.be/Xv_TmtRLHJY?si=H1N_UkWSli2xLJsG">YouTube | Global Enterprise</a></p>
<ul>
<li>you can have it “sound like me” in outlook</li>
<li>41:35 copilot studio</li>
<li>Can use open AIs GPTs</li>
</ul>
<section id="azure-open-ai" class="level1">
<h1>Azure open ai</h1>
<p><a href="https://youtu.be/obfs_LEzPHo?si=AorIJwEutzw3UVIR">YouTube</a></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/obfs_LEzPHo?si=AorIJwEutzw3UVIR" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li>BRK206 Vector search and state of the art retrieval for generative ai apps</li>
<li>BRK205 multimodal</li>
</ul>
<p>Things to explore:</p>
<ul>
<li>TeamsKit</li>
<li>Azure OpenAI</li>
</ul>


</section>

<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <guid>https://www.bryanwhiting.com/tech/microsoft-copilot-notes.html</guid>
  <pubDate>Fri, 05 Apr 2024 21:57:30 GMT</pubDate>
</item>
<item>
  <title>LLMs need to call Functions</title>
  <link>https://www.bryanwhiting.com/news/llms-need-to-call-functions.html</link>
  <description><![CDATA[ 





<p><a href="https://www.linkedin.com/posts/andrewyng_microsoft-absorbs-inflection-nvidias-new-activity-7181717345814421504-E1hR?utm_source=share&amp;utm_medium=member_ios">Andrew Ng on LinkedIn: Microsoft Absorbs Inflection, Nvidia’s New GPUs, Managing AI Bio Risk, and… | 38 comments</a></p>
<ul>
<li>LLms guess what functions to call, such as running a calculation in Python or a function to do a web search.</li>
<li>Efficient Tool Use with Chain-of-Abstraction Reasoning, Gao et al.&nbsp;(2024)</li>
</ul>
<p><a href="https://www.deeplearning.ai/the-batch/issue-243/">Microsoft Absorbs Inflection, Nvidia’s New GPUs, Managing AI Bio Risk, and more</a></p>
<p><a href="https://www.deeplearning.ai/the-batch/how-agents-can-improve-llm-performance/?utm_campaign=The%20Batch&amp;utm_source=hs_email&amp;utm_medium=email">Four AI Agent Strategies That Improve GPT-4 and GPT-3.5 Performance</a></p>
<ul>
<li>AI agenic workflows can help AI achieve 95% code quality vs zero shot.</li>
</ul>
<p><a href="https://www.deeplearning.ai/the-batch/agentic-design-patterns-part-2-reflection/?ref=dl-staging-website.ghost.io">Agentic Design Patterns Part 2: Reflection</a></p>
<ul>
<li>Here’s code intended for task X: [previously generated code] Check the code carefully for correctness, style, and efficiency, and give constructive criticism for how to improve it.</li>
<li>Next, we can prompt the LLM with context including (i) the previously generated code and the constructive feedback and (ii) ask it to use the feedback to rewrite the code</li>
</ul>
<p><a href="https://www.deeplearning.ai/the-batch/agentic-design-patterns-part-3-tool-use/?ref=dl-staging-website.ghost.io">Agentic Design Patterns Part 3: Tool Use</a></p>
<p><a href="https://mad.firstmarkcap.com/">FirstMark | 2024 MAD (ML/AI/Data) Landscape</a> - there are too many tools for any one person or organization to know what to do with. It’s a full time job just to understand what’s out there.</p>
<p>https://www.linkedin.com/posts/luke-b_data-nerds-what-technology-should-you-learn-activity-7181698703722729472-N03S?utm_source=share&amp;utm_medium=member_ios</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.bryanwhiting.com/img/screenshot-mad-first-mark-cap.jpeg" class="preview-image img-fluid figure-img"></p>
<figcaption class="margin-caption">Data landscape</figcaption>
</figure>
</div>
<p><a href="https://deepmind.google/research/publications/85521/">Gecko: Versatile Text Embeddings Distilled from Large Language Models - Google DeepMind</a></p>
<ul>
<li>gecko is a text embedding model that can do more with 256 tokens than most can with 700+</li>
</ul>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>news</category>
  <category>ai</category>
  <category>ai tools</category>
  <guid>https://www.bryanwhiting.com/news/llms-need-to-call-functions.html</guid>
  <pubDate>Thu, 04 Apr 2024 21:06:11 GMT</pubDate>
</item>
<item>
  <title>Why you should log with Aimstack</title>
  <link>https://www.bryanwhiting.com/tech/why-you-should-log-with-aimstack.html</link>
  <description><![CDATA[ 





<p>I’ve long idolized <a href="https://aimstack.io/">Home | AimStack</a>. It’s a tool that allows you to track metrics and hyperparameters and a whole bunch of stuff. It lets you compare across experiments.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.bryanwhiting.com/img/screenshot-aimstack.jpeg" class="preview-image img-fluid figure-img"></p>
<figcaption class="margin-caption">Aim landing lage</figcaption>
</figure>
</div>
<p>I first built my own version of this in <code>RShiny</code> back in 2017 so I could compare AUC across experiments.</p>
<p>I was using <code>h2o.ai</code> at the time which had this great flow for monitoring an individual experiment but made it impossible to compare across experiments.</p>
<p>Then my company Capital One built <code>rubicon</code>: <a href="https://github.com/capitalone/rubicon-ml">GitHub - capitalone/rubicon-ml: Capture all information throughout your model’s development in a reproducible way and tie results directly to the model code!</a>. This was cool and they open sourced it. It tracks parameters.</p>
<p>But it pales in comparison to <code>aim</code>.</p>
<p>Aim can do all these things:</p>
<ul>
<li>Track hyperparameters</li>
<li>Track learning curves (like a metric over time such as when building DL models and you’re watching how the error decreases with each epoch)</li>
<li>Track any <code>plotly</code> plot, which means you can put any EDA charts nicely organized in one place</li>
<li>it captures all your <code>logging.info</code> calls so you don’t need to use a remote logging thing like <code>cloud watch</code> to monitor long runs</li>
<li>It has its own loggers if you want to differentiate</li>
<li>It lets you take notes on an experiment</li>
<li>If lets you compare across experiments</li>
<li>It lets you use locally or remotely as a remote API</li>
<li>It tracks images, etc.</li>
<li>it connects with ML packages like <code>xgbost</code> to auto log.</li>
<li>It can even convert <code>MLFlow</code> data.</li>
</ul>
<p>It’s incredible. Use it. It’s free.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>logging</category>
  <category>machine learning</category>
  <category>data pipeline</category>
  <category>ml pipeline</category>
  <category>data science</category>
  <category>monitoring</category>
  <category>ml-tools</category>
  <guid>https://www.bryanwhiting.com/tech/why-you-should-log-with-aimstack.html</guid>
  <pubDate>Tue, 02 Apr 2024 22:15:37 GMT</pubDate>
</item>
<item>
  <title>Configurations for ML Pipelines</title>
  <link>https://www.bryanwhiting.com/tech/configurations-for-ml-pipelines.html</link>
  <description><![CDATA[ 





<p>Configuring an ML pipeline means you have 15 different things that could change at any time and you create a way to easily change those 15 things. Those 15 things could be file paths, data filtering steps, models you want to use, etc.</p>
<p>Any researcher constantly asks themselves: but what if I switch X parameter? What would happen?</p>
<p>And so the researcher starts to configure a pipeline.</p>
<section id="config-methods-ive-used" class="level1">
<h1>Config Methods I’ve Used</h1>
<p>First time I built a config it was in VBA. I had a text file I loaded in that could be overwritten based on a setting someone chose.</p>
<p>Second time I config’d something was in Python. I used ConfigParser, a Python standard library class. It was pretty good for 2017. But unwieldy. Don’t use this. It had cool string substitutions but there are better tools now.</p>
<p>Third thing I saw was using a Python constants.py file. Just import Python variables from another module. This is nice because you can import model objects or such. Dicts. Whatever. Seems great. But it’s Python code. Config files probably shouldn’t be code. They should be configs. Configs are easy to read for non-tech folks. They have no dependencies. They’re just plain text files. Every great software follows this, like <code>k8s</code> helm charts or whatever. Google loves using <code>Protobufs</code>. Configs shouldn’t be code, because if they’re code they’re dangerous. You start doing crazy things with them.</p>
<p>Fourth thing I did was to use YAML which is very clean. Lots of people like YAML. This gets unwieldy if you need 100 configs for different customers, for example. Can you imagine managing 100 yaml files? What if you need to update one param? Then you need to update 100 files. Rough. So then you start setting “default” blocks and settings.</p>
<p>A nice pairing was to use Pydantic to read in the YAML file and validate types. You’ve got to validate types. What’s an int vs a string? Using <code>pydantic</code> means that we needed to design the pipeline to rely on some <code>config</code> class on the top level. My suggestion would be to design functions to take in arguments that are satisfied by the config, and don’t pass the config object itself into the function. The former keeps your code cleaner and more testable. The latter sends you down a chaotic slippery slope.</p>
<p>Fifth thing was to use one default YAML. This solved the issue of redundancy across all the 100 YAML files. (If you only have one model, you probably need only 1 YAML file so this may not be your problem.) But this still kinda stinks. It’s in a file.</p>
<p>Sixth thing was some eng’s on my team saw a better way and build a CRUD database. This made it so we didn’t have to do a code change to update a config. That means that people outside the team could edit a config. Awesome. But we still have 100 web pages that could change. Kinda sux. And we still had a default setting - essential. Benefits of a crud are migrations. You can get rid of one option across 100 configs more easily.</p>
<p>Problem with 100 YAML or 100 web pages is that if you want to change things or run experiments, you need to literally clone the config file. Now you have 15 versions of the same config file with slight modifications and you can’t remember what’s going on. So you delete them all eventually and just pick one.</p>
<p>Seventh thing: shove everything into environment variables. Create a <code>.env</code> file and load with <code>dotenv()</code> but that gets messy because env files don’t support data type validation. Validation is essential, lest you try to encode a Boolean in your env file only to realize environment variables only support strings and then you have a “False” rendering as true in your “if os.get(MY_BOOL)” call just because it exists as a valid string. Blech… 🤮</p>
</section>
<section id="hydra" class="level1 page-columns page-full">
<h1>Hydra?</h1>
<p>I’ve been using Hydra lately and I see a lot of benefits in that it solves a lot of the things I’ve tried and seen solved above.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.bryanwhiting.com/img/screenshot-hydra-configs.jpeg" class="preview-image img-fluid figure-img"></p>
<figcaption class="margin-caption">Hydra!</figcaption>
</figure>
</div>
<p><a href="https://hydra.cc/">Hydra | Hydra</a></p>
<ul>
<li>Hydra is Python open source maintained by Facebook</li>
<li>If built to configure pipelines, in particular ML pipelines but could be used for anything that needs config files.</li>
<li>It uses <code>dataclasses</code>, which ensures the typing of your files</li>
<li>It uses <code>yaml</code> files as the config sources</li>
<li>You can specify default config values</li>
<li>It quickly allows you to override config files from the command line or from editing the yaml file directly.</li>
<li>It’s possible to run from the command line a single config with several different values using the <code>multirun</code> flag.</li>
<li>It gives a nice way to organize your output folder and automatically exports the fully qualified config there.</li>
<li>It will capture your logs into your output directory.</li>
<li>You can version your configs very easily.</li>
</ul>
<p>This demo is slick:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/tEsPyYnzt8s?si=2T58Ix4ZAo-N75y0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="why-i-like-hydras-design" class="level1">
<h1>Why I like Hydra’s design</h1>
<ul>
<li>This seems really nice because it avoids the headache of changing code.</li>
<li>Also, you can create a simple bash loop to execute 5 different experiments - while retaining only one config file. Or you can just use the <code>multirun</code> flag to cross a few arguments easily. It’ll create separate output folders for each run.</li>
<li>Hydra maintains a system of record for every run. You know exactly how that run was generated given the parameters fed into it.</li>
</ul>
</section>
<section id="my-ideal-world" class="level1">
<h1>My Ideal World</h1>
<p>Hydra makes it incredibly easy to kick off a bunch of runs without managing multiple configurations or hard-coding constants into a Python file.</p>
<p>It enables you to have parameters outside of your code. This makes experimentation very easy.</p>
<p>It does not make it easy for non-developers to edit the config - so you’d still want a GUI to enable that that translates into yaml files. This isn’</p>
<p>It’s lightweight - all it does is create a <code>config</code> class that you then pass into your pipeline to control the pipeline. That pipeline could be airflow or whatever.</p>
<p>It may be nice to pair <code>hydra</code> with <code>metaflow</code> or <code>flyte</code>.</p>
<p>How do you configure? # Appendix</p>
<ul>
<li><a href="https://medium.com/optuna/easy-hyperparameter-management-with-hydra-mlflow-and-optuna-783730700e7d">Easy Hyperparameter Management with Hydra, MLflow, and Optuna | by NT | Optuna | Medium</a></li>
<li><a href="../tech/why-you-should-log-with-aimstack.html">Why you should log with Aimstack</a></li>
</ul>


</section>

<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>configuration</category>
  <category>software engineering</category>
  <category>ml pipeline</category>
  <category>ml-tools</category>
  <guid>https://www.bryanwhiting.com/tech/configurations-for-ml-pipelines.html</guid>
  <pubDate>Tue, 02 Apr 2024 21:50:43 GMT</pubDate>
</item>
<item>
  <title>Ibis DataFrames for Python, why I hate Pandas, and what I miss about dplyr</title>
  <link>https://www.bryanwhiting.com/tech/ibis-dataframes-for-python-vs-pandas.html</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>I haven’t used <code>ibis</code> as of writing this. Just reviewed the docs.</p>
</blockquote>
<section id="data-manipulation-in-python" class="level1">
<h1>Data Manipulation in Python</h1>
<p>I’ve been a Python data scientist for 5-6 years. I’ve never liked pandas. Ever.</p>
<p>It’s because I started as a <code>tidyverse</code> data scientist in R. One of the things I’ve missed about using Python is <code>dplyr</code>, an R package for data manipulation. And when I started with Python it was in PySpark - it felt very similar to <code>dplyr</code>, except for the annoying JVM.</p>
<p>It’s amazing because everything is done by chaining, and it’s able to manipulate in memory or translate to a spark or SQL backend for execution. (It’s very easy to use base <code>dplyr</code> and then just run the same query in memory on a small dataframe or against <code>BigQuery</code> or something.)</p>
<p>This chaining also avoids the common readability problem with pandas wherein often you see df[x] = df[y] / df[b] on one line and that’s repeated for multiple lines if you want to create multiple new variables.</p>
<p>While <code>pandas</code> has the .pipe and .assign operators for chaining, they still require lambda functions, which get annoying. This Reddit thread explores the opinion I share: the api is inconsistent. <a href="https://www.reddit.com/r/dataengineering/comments/146rj9m/does_anyone_else_hate_pandas/">Reddit - Does anyone else hate pandas?</a>.</p>
<p><code>Polars</code> makes this much cleaner with the with_columns operator, for example, which is also very similar to <code>PySpark</code>. But <code>polars</code> is Rust backend, not Java. Game, Set, Match <code>polars</code>.</p>
<p>I’m not the only one who loves <code>dplyr</code> . There have been several Python attempts to build <code>dplyr</code> in the Python ecosystem. There were great packages like <a href="https://github.com/coursera/pandas-ply">GitHub - coursera/pandas-ply: functional data manipulation for pandas</a> (9 years since last commit), and <a href="https://github.com/dodger487/dplython">GitHub - dodger487/dplython: dplyr for python</a>, not updated in 7 years. Then there’s the <code>dfply</code> <a href="https://github.com/kieferk/dfply">package</a> that hasn’t been maintained in 5 years (see <a href="https://towardsdatascience.com/dplyr-style-data-manipulation-with-pipes-in-python-380dcb137000">tutorial</a>).</p>
<p>The <code>siuba</code> package is the latest Python <code>dplyr</code> incantation that is actively maintained: <a href="https://github.com/machow/siuba">GitHub - machow/siuba: Python library for using dplyr like syntax with pandas and SQL</a> and can also execute against a SQL backend, but it can’t execute a polars backend. # Ibis to solve my problems?</p>
<p>I just came across <code>ibis</code> however, and it seems really promising. Turns out it was <a href="https://ibis-project.org/concepts/who">created</a> in 2015 by Wes McKinney, who created the pandas pyarrow backend to solve the <a href="https://wesmckinney.com/blog/apache-arrow-pandas-internals/">“10 Things I Hate About pandas”</a>. More on the</p>
<ul>
<li><a href="https://ibis-project.org/">Ibis</a></li>
<li><a href="https://ibis-project.org/tutorials/getting_started">Ibis – getting_started</a></li>
<li><a href="https://ibis-project.org/posts/wow-analysis/">Ibis – Analysis of World of Warcraft data</a></li>
</ul>
<p><img src="https://www.bryanwhiting.com/img/screenshot-ibis-data.jpeg" class="preview-image img-fluid"></p>
<p>It looks like <code>dplyr</code> (for example it even copies some syntax like mutate() for adding new columns and select for picking columns). But, the benefit is it has <code>polars</code> and <code>pandas</code> as backends, but also offers <code>PySpark</code> (should someon need to use databricks as a backend compute engine). And it can also translate into SQL. Sure, polars can do this too: <a href="https://docs.pola.rs/user-guide/io/database/">Databases - Polars user guide</a>. But <code>ibis</code> seems more extensive.</p>
<p>This means I could have one programming language to execute either <code>polars</code>, SQL, or PySpark, rather than have both <code>polars</code> and SQL or <code>pandas</code> in my pipeline in different places. (Side note: why would I use <code>pandas</code> as a backend though when <code>polars</code> is so fast?)</p>
<p>I just discovered this over the weekend. Would love your thoughts! I’m sure there are limitations vs raw polars/pandas that are hidden from my quick overview.</p>
</section>
<section id="appendix" class="level1">
<h1>Appendix</h1>
<p>The most annoying thing about <code>pandas</code> is the <code>.transform()</code> operator. I hate it. Just hate it. It never makes sense and I always have to look it up. This essentially just does a window operation.</p>
<p>You don’t need this until you need to do some type of aggregation within a group. Let’s assume you want to calculate the fraction of sales attributed to a city within a state. (What fraction of sales in California come from San Francisco, for example.)</p>
<p>Read the following and consider for yourself what’s simplest:</p>
<pre><code>import pandas as pd

# Sample data
data = {
    'State': ['CA', 'CA', 'CA', 'NY', 'NY', 'NY'],
    'City': ['SF', 'LA', 'SF', 'NYC', 'Buffalo', 'NYC'],
    'Sales': [100, 200, 150, 300, 100, 200]
}

df = pd.DataFrame(data)

# Calculate fraction of sales by city within state
df['Fraction'] = df.groupby('State')['Sales'].apply(lambda x: x / x.sum())

print(df)</code></pre>
<p>Polars:</p>
<pre><code>import polars as pl

df = pl.DataFrame(data)

# Calculate fraction of sales by city within state
df = df.with_column(
  pl.col('Sales') / df.groupby('State').agg(pl.sum('Sales'))['sum'])

print(df)</code></pre>
<p>Dplyr:</p>
<pre><code>library(dplyr)

# Calculate fraction of sales by city within state
df &lt;- data %&gt;%
  group_by(State) %&gt;%
  mutate(Fraction = Sales / sum(Sales))</code></pre>
<p>Ibis:</p>
<pre><code>import ibis

# Calculate fraction of sales by city within state
expr = sales.mutate(Fraction=sales['Sales'] / sales.groupby('State').Sales.sum())

result = expr.execute()
print(result)</code></pre>
<p>It may not look all that different, but pandas has this weird syntax where you group by (something) but then select a column with brackets. But sometimes you can use periods to select the column.</p>
<p>The polars and ibis implementations seem simple, but overly verbose.</p>
<p>Then there’s the <code>dplyr</code>. So elegant and simple. The <code>sum()</code> operator is summing within the group, and the <code>sales/sum(sales)</code> is very easy to read.</p>
<p>In pandas I’m left wondering what is <code>x/x.sum()</code> and why this <code>lambda</code> thing?</p>
<p>This is a very simple example, but the more you get into the weeds the more my point becomes obvious.</p>
<p>The benefits of <code>dplyr</code> come from when you want to do 10 mutates in one go. It’s so simple. In pandas that’s 10 lambda functions with a .assign operator.</p>
<p>Like, look at <code>pandas</code> trying to do this:</p>
<pre><code>import pandas as pd

# Sample data
data = {
    'A': list(range(1, 11)),
    'B': list(range(11, 21)),
    'C': list(range(21, 31))
}

df = pd.DataFrame(data)

# Using assign to create 10 new columns
df = df.assign(
    # New columns with various transformations
    A_Squared=lambda x: x['A']**2,
    B_Squared=lambda x: x['B']**2,
    C_Squared=lambda x: x['C']**2,
    A_Cubed=lambda x: x['A']**3,
    B_Cubed=lambda x: x['B']**3,
    C_Cubed=lambda x: x['C']**3,
    A_Log=lambda x: np.log(x['A']),
    B_Log=lambda x: np.log(x['B']),
    C_Log=lambda x: np.log(x['C']),
    A_B=lambda x: x['A'] * x['B']
)

print(df)</code></pre>
<p>Now look at <code>dplyr</code>:</p>
<pre><code>library(dplyr)

# Sample data
data &lt;- data.frame(
  A = 1:10,
  B = 11:20,
  C = 21:30
)

# Using mutate to create 10 new columns
df &lt;- data %&gt;%
  mutate(
    # New columns with various transformations
    A_Squared = A^2,
    B_Squared = B^2,
    C_Squared = C^2,
    A_Cubed = A^3,
    B_Cubed = B^3,
    C_Cubed = C^3,
    A_Log = log(A),
    B_Log = log(B),
    C_Log = log(C),
    A_B = A * B
  )

print(df)</code></pre>
<p>Now let’s complicate it, where each manipulation takes in a previous column:</p>
<pre><code>import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [10, 20, 30, 40, 50]})

# Mutate operations
df['B'] = df['A'] ** 2
df['C'] = df['A'] + df['B'] * 2
df['D'] = df['B'] / 2
df['E'] = df['C'] - df['A']
df['F'] = df['A'] * 5
df['G'] = df['D'] - df['E']
df['H'] = df['F'] + df['G']
df['I'] = df['D'] ** 2
df['J'] = df['H'] / df['I']
df['K'] = df['I'] - df['J']

print(df)</code></pre>
<p>This is how most people write pandas. They write <code>df</code> 26 times.</p>
<p>Let’s look at pandas using the <code>assign</code> operator:</p>
<pre><code>import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [10, 20, 30, 40, 50]})

# Mutate operations with assign and lambda functions
df = df.assign(
    B=lambda x: x['A'] ** 2,
    C=lambda x: x['A'] + x['B'] * 2,
    D=lambda x: x['B'] / 2,
    E=lambda x: x['C'] - x['A'],
    F=lambda x: x['A'] * 5,
    G=lambda x: x['D'] - x['E'],
    H=lambda x: x['F'] + x['G'],
    I=lambda x: x['D'] ** 2,
    J=lambda x: x['H'] / x['I'],
    K=lambda x: x['I'] - x['J']
)

print(df)</code></pre>
<p>Slightly better but still an eyesore. 10 lambda statements and still 26 <code>x</code> calls.</p>
<p>And in R:</p>
<pre><code>library(dplyr)

# Create a tibble
df &lt;- tibble(A = c(10, 20, 30, 40, 50))

# Mutate operations
df &lt;- df %&gt;%
  mutate(B = A ^ 2,
         C = A + B * 2,
         D = B / 2,
         E = C - A,
         F = A * 5,
         G = D - E,
         H = F + G,
         I = D ^ 2,
         J = H / I,
         K = I - J)

print(df)</code></pre>
<p>It’s just so simple. So elegant. So beautiful. No wasted text. Very easy to read.</p>
<p>Ibis seems similar to dplyr but requires the <code>D = _.["B"]/2</code> operation. <a href="https://ibis-project.org/tutorials/cloud-data-platforms/starburst-galaxy/1_basics.html#mutating-columns">Ibis – basics - mutating columns</a></p>


</section>

<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>python</category>
  <category>data science</category>
  <category>data manipulation</category>
  <category>pandas</category>
  <category>ibis</category>
  <category>data engineering</category>
  <category>analytics</category>
  <guid>https://www.bryanwhiting.com/tech/ibis-dataframes-for-python-vs-pandas.html</guid>
  <pubDate>Sun, 31 Mar 2024 21:24:06 GMT</pubDate>
</item>
<item>
  <title>On file formats: parquet vs csv</title>
  <link>https://www.bryanwhiting.com/tech/on-file-formats-parquet-vs-csv.html</link>
  <description><![CDATA[ 





<p>Came across this article today: <a href="https://kaveland.no/friends-dont-let-friends-export-to-csv.html?utm_source=tldrnewsletter">Robin’s blog – Friends don’t let friends export to CSV</a></p>
<p>This has largely been my experience too: go with the file format that’s fast reading in and out.</p>
<p>It’s rare a data scientist with open a file on their computer rather than just <code>pd.read_*()</code> it in.</p>
<p>In my last job, we were using <code>jsonl</code> files for no other reason than it how one person liked to use command line tools to analyze it.</p>
<p>But if you’re using command line tools to inspect a data file, and not just a Python repl, you’ve already gone down the wrong direction IMO. But what if you’re on a remote server and don’t have pandas installed? Yea, that’s not something you should plan for. At that point, just scp the file to a place you can read it.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>reactions</category>
  <category>news</category>
  <category>data science</category>
  <category>data engineering</category>
  <guid>https://www.bryanwhiting.com/tech/on-file-formats-parquet-vs-csv.html</guid>
  <pubDate>Tue, 26 Mar 2024 22:39:56 GMT</pubDate>
</item>
<item>
  <title>Chronos: Time Series Foundation Model by Amazon</title>
  <link>https://www.bryanwhiting.com/tech/chronos-time-series-foundation-model-by-amazon.html</link>
  <description><![CDATA[ 





<p><a href="../tech/timegpt-and-lag-llama-two-foundation-models-for-time-series-forecasting.html">TimeGPT and Lag-Llama: Two foundation models for time series forecasting</a> are two predecessor models.</p>
<p>Amazon just came out with Chronos.</p>
<p>Discussion here:</p>
<p><a href="https://www.linkedin.com/posts/pascalbiese_chronos-learning-the-language-of-time-series-ugcPost-7176540406761820160-mTvQ?utm_source=share&amp;utm_medium=member_ios">Pascal Biese on LinkedIn: Chronos: Learning the Language of Time Series | 87 comments</a></p>
<p><img src="https://www.bryanwhiting.com/img/screenshot-chronos-time-series.jpeg" class="preview-image img-fluid"></p>
<p>Puff Piece: <a href="https://www.amazon.science/blog/adapting-language-model-architectures-for-time-series-forecasting">Chronos: Adapting language model architectures for time series forecasting - Amazon Science</a></p>
<p>GitHub: <a href="https://github.com/amazon-science/chronos-forecasting/">GitHub - amazon-science/chronos-forecasting: Chronos: Pretrained (Language) Models for Probabilistic Time Series Forecasting</a></p>
<p>Paper: <a href="https://arxiv.org/abs/2403.07815v1">[2403.07815v1] Chronos: Learning the Language of Time Series</a></p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>foundation models</category>
  <category>time series</category>
  <category>ml-tools</category>
  <category>data science</category>
  <category>machine learning</category>
  <guid>https://www.bryanwhiting.com/tech/chronos-time-series-foundation-model-by-amazon.html</guid>
  <pubDate>Tue, 26 Mar 2024 15:53:23 GMT</pubDate>
</item>
<item>
  <title>News Notes for 2024-03-18</title>
  <link>https://www.bryanwhiting.com/news/2024-03-18-news-notes.html</link>
  <description><![CDATA[ 





<p><a href="https://www.linkedin.com/posts/gisenberg_this-is-an-irs-tax-form-of-a-recent-business-activity-7175477376938602497-dinJ?utm_source=share&amp;utm_medium=member_ios">Greg Isenberg on LinkedIn: This is an IRS tax form of a recent business we started. 95% of the… | 65 comments</a> - Greg on how to bootstrap a busines. - This is an IRS tax form of a recent business we started. 95% of the businesses we start look like this:</p>
<p>We use audience to bootstrap customers.</p>
<p>When we don’t have time to build an audience, we’ll partner with a creator. Give them a cut of the business.</p>
<p>Then we’ll create a little community of the power customers. Sometimes it’s just an iMessage group or WhatsApp group.</p>
<p>We limit who can come in. This is only for the people for the most excited audience members. Those who just are dying to be in a group of other like-minded people.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>news</category>
  <guid>https://www.bryanwhiting.com/news/2024-03-18-news-notes.html</guid>
  <pubDate>Mon, 18 Mar 2024 10:57:44 GMT</pubDate>
</item>
<item>
  <title>How I Learn and How to Hack the Audio Book and Speed Reading Game</title>
  <link>https://www.bryanwhiting.com/tech/how-i-learn.html</link>
  <description><![CDATA[ 





<p>I’ve been overdosing slightly on learning lately.</p>
<p>Ever since I got off social media, I got into writing (<a href="../tech/a-knife-to-a-gun-fight.html">A Knife to a Gun Fight: Why I’m off Social Media</a>), and listening to audio books.</p>
<p>Podcasts are fine, but they’re about as quality as top-of-mind thinking. Books are usually far more instructive because each sentence is reviewed at least a few times if not a hundred times during the editing process.</p>
<p>I noticed that once I started binging books instead of posts, my happiness and satisfaction increased.</p>
<p>Here’s a strategy I’m using for learning.</p>
<ol type="1">
<li>Get Audible and Spotify subscriptions. It has books that aren’t available on Libby (which I also use).</li>
<li>Stock up on free books using Libby. Hold times vary, but can be a few weeks or months for popular titles. Note: you can supply multiple library accounts.</li>
<li>For short books not on Libby, check Audible free catalog. If it’s not in the Audible free catalog, check Spotify Premium listening, which is 15 hours per month. If you listen to short books on Spotify, you can get 2-3 books in 15 hours. (It’s 15 book hours, not listening hours.) Also, if your phone is locked, you can go beyond the 15 hours (don’t report this…). But once you re open the app the 15 hour limit will halt you. 2-3 books would otherwise be $20-45 dollars depending on the cost of the audio book. $12 for Spotify premium is a deal.</li>
<li>Use Audible credits for books you can’t find on Libby or Spotify. Remember, Audible is $15 per month. So don’t waste it on a $4 book. Buy the expensive books or &gt;15 hour books with the credits.</li>
<li>With all the cash savings, and if you still have time, now you can buy the remaining books you want on either Audible and Spotify.</li>
</ol>
<p>Most books are on Libby. Domain specific books and cutting edge releases books are on Audible. Lots of great in between books on Spotify Premium.</p>
<p>I don’t know why but after 50 books you get a sense for what books are going to be available where.</p>
<p>Lastly, on Chrome I use the SwiftRead extension for speed reading and on iOS the <a href="https://apps.apple.com/us/app/outread-speed-reading/id778846279">Outread</a> app.</p>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>life hacks</category>
  <guid>https://www.bryanwhiting.com/tech/how-i-learn.html</guid>
  <pubDate>Thu, 14 Mar 2024 16:18:34 GMT</pubDate>
</item>
<item>
  <title>Devin the AI coder</title>
  <link>https://www.bryanwhiting.com/tech/devin-the-ai-coder.html</link>
  <description><![CDATA[ 





<p><a href="https://www.cognition-labs.com/blog">Blog</a></p>
<ul>
<li>Devin is hooked up to a terminal, the internet, and the code base</li>
<li>Can solve some problems and to end</li>
<li>Let’s you help be involved in the process</li>
</ul>



<p>_________________________ <br> <br> <i><a href="https://www.bryanwhiting.com/about">Bryan</a> lives somewhere at the intersection of faith, fatherhood, and futurism and writes about <a href="https://www.bryanwhiting.com/tech">tech</a>, <a href="https://www.bryanwhiting.com/books">books</a>, <a href="https://www.bryanwhiting.com/christianity">Christianity</a>, <a href="https://www.bryanwhiting.com/gratitude">gratitude</a>, and <a href="https://www.bryanwhiting.com/">whatever’s on his mind</a>. If you liked reading, perhaps you’ll also like subscribing: <br><br> </i><iframe src="https://embeds.beehiiv.com/106e21ff-1989-43d2-9bd7-d4a4c4404ab6?slim=true" data-test-id="beehiiv-embed" height="52" frameborder="0" scrolling="no" style="margin: 0; border-radius: 0px !important; background-color: transparent;"></iframe></p> ]]></description>
  <category>tech</category>
  <category>ai tools</category>
  <guid>https://www.bryanwhiting.com/tech/devin-the-ai-coder.html</guid>
  <pubDate>Wed, 13 Mar 2024 21:15:17 GMT</pubDate>
</item>
</channel>
</rss>
