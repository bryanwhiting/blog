      "
)
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_options(column.labels.rotate = 90) 
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_options(column_labels.rotate = 90) 
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
    tab_options(column_labels.padding = px(15),
              column_labels.padding.horizontal = px(7)) %>%
  cols_align("center", everything()) %>%
  opt_css(
  css = "
    #mygt .gt_col_heading {
      text-align: center;
      transform: rotate(-90deg);
      font-weight: bold;
    }
    "
)
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
    # tab_options(column_labels.padding = px(15),
    #           column_labels.padding.horizontal = px(7)) %>%
  cols_align("left", everything()) %>%
  opt_css(
  css = "
    #mygt .gt_col_heading {
      text-align: center;
      transform: rotate(-90deg);
      font-weight: bold;
    }
    "
)
df2_recent
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
    # tab_options(column_labels.padding = px(15),
    #           column_labels.padding.horizontal = px(7)) %>%
  cols_align("left", everything()) %>%
  opt_css(
  css = "
    #mygt .gt_col_heading {
      text-align: left;
      transform: rotate(-90deg);
      font-weight: bold;
    }
    "
)
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
    # tab_options(column_labels.padding = px(15),
    #           column_labels.padding.horizontal = px(7)) %>%
  opt_css(
  css = "
    #mygt .gt_col_heading {
      text-align: left;
      transform: rotate(-90deg);
      font-weight: bold;
    }
    "
)
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_style(
    style = cell_borders(sides = "right", color = "gray", weight = px(1)),
    locations = cells_body(columns = everything())
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    num ~ px(150),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    everything() ~ px(150),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center", scope = "body") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    everything() ~ px(150),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    everything() ~ px(150),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    everything() ~ px(20),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    everything() ~ px(50),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    date ~ px(100),
    everything() ~ px(50),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  )
00~library(dplyr)
library(ggplot2)
list_fields = c('categories')
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # parse any lists
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
# add gratitude
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
df$date <- lubridate::parse_date_time(df$date, orders = c("ymddf "ymd HMS", "ymd HM", "ymdHMS", "ymdHM")) 
df$date <- as.Date(df$date)
df2 <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude'
    ) %>%
  select(
    date, pray, meditate, strength, cardio, post_cfm_study, post_gratitude
  ) %>% 
  group_by(date) %>%
  summarize(
    pray=max(pray, na.rm=T), 
    meditate=max(meditate, na.rm=T), 
    cardio = max(cardio, na.rm=T), 
    strength=max(strength, na.rm=T), 
    post_cfm_study=max(post_cfm_study, na.rm=T), 
    post_gratitude=max(post_gratitude, na.rm=T)
  ) %>%
  tidyr::replace_na(list(pray=0, meditate=0, strength=0,  tidyr::replace_na(list(pray=0, meditate=0, s)
  tidyr::replace_na(l
 tidyr::replace
  rowwise() %>%
  mutate(total_goals = sum(pray, meditate, strength, cardio, post_cfm_study, post_gratitude, na.rm  mutate(total_goals = sum(pray, medit(d  mutate(total_g) %>%
  mutate(week_of_year = lubridate::week(date),
         day_of_week = lubridate::wday(date, label = TRUE)) 
ggplot(df3, aes(x = week_of_year, y = day_of_week, fill = total_goals)) +
  geom_til  geom_t= "white", width = 0.9, height = 0.9) +  # Adjust these values as needed t  geom_til  geom_t= "white", width = 0.9,low = "white , high = "darkgreen", limits = c(1, 6)) +
  labs(x = "Week of the Year", y = "Day of Week", fill='Count') +
  them  them  the +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
                                          ,
                             ement_bla                             ement_bla                axis.ticks = element_blank())01~
library(dplyr)
library(ggplot2)
list_fields = c('categories')
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # parse any lists
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
dir
file
