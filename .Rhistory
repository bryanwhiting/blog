  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  files <- li f  files <  # print(file)
    # convert to df
    df_new <- extract_yaml_to_df(file) 
                                        ow                                        ow          te_t                          md", "ymd HMS", "ymd HM", "ymdHMS", "ymdHM")) 
df$date <- as.Date(df$date)
# ad# ad# ad# ad# ad# adr(col in c('ru# dist', 'hike-dist')){
  if(!(c  if(!(c  if(mes(  if(!(c   df[[col]] <- 0
  }
}
# fill in missing defaults, characters are set to 'x' by default in _# fill in missing defaults, characters are sre(# fill in er# fill in missing defaults, characters are set to 'x' by dng# fill in missing defaults, characters are set to 'x' by defaultstr_detect(categories, 'come fol# fill in missing defauitude = folder == 'gratitude',
    pelo = ifelse(`pelo-time` > 0, 1, 0),
    car    car    car    car    car    cun-dist`     car    caist    car    car    car    car    car    cun-disrc    car    car    car %>%
  filter(title   filter(title   filter(title   filter(title   filter(titlete, pray, meditate, cardio, strength, post_cfm_study, post_gratitude
  )  )  )  )  )  )  )  )  )  )  )  )  )  c)) %>%
  mutate(across(-date, ~replace_na(., 0))) %>%
  group_by(date) %>%
  summarize_all(max) %>%
  ungroup() %>%
  arrange(desc(date))
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gt)
# list_fields = c('categories', 'body-zones', 'exercies')
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # Anything that's a vector should be listed and collapsed
  list_fields <- names(yaml_data)[sapply(yaml_data, function(x) is.vector(x) && length(x) > 1)]
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
# add gratitude
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # print(file)
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
df$date <- lubridate::parse_date_time(df$date, orders = c("ymd", "ymd HMS", "ymd HM", "ymdHMS", "ymdHM")) 
df$date <- as.Date(df$date)
# add missing columsn
for(col in c('run-dist', 'hike-dist')){
  if(!(col %in% colnames(df))){
    df[[col]] <- 0
  }
}
# fill in missing defaults, characters are set to 'x' by default in _day journal
df <- df %>%
  mutate(across(where(is.character), ~ifelse(. == 'x', NA, .)))
# Create "cardio" and "strength" flags
df <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude',
    pelo = ifelse(`pelo-time` > 0, 1, 0),
    cardio = ifelse(`pelo-time` > 0 | `run-dist` > 0 | `hike-dist` > 0, 1, 0),
    strength = ifelse(!is.na(exercises) >= 1, 1, 0)
  ) %>%
  filter(title != "test")
df
df2 <- df %>%
  select(
    date, pray, meditate, cardio, strength, post_cfm_study, post_gratitude
  ) %>% 
  mutate(across(-date, as.numeric)) %>%
  mutate(across(-date, ~replace_na(., 0))) %>%
  group_by(date) %>%
  summarize_all(max) %>%
  ungroup() %>%
  arrange(desc(date))
df2
df2_recent <- df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    `Day` = date,
    `📖` = post_cfm_study,
    `🙏🏻` = post_gratitude,
    `🛐` = pray,
    `🚴🏻‍♂️` = cardio,
    `🏋🏼‍♂️` = strength,
    `🧘🏼‍♂️` = meditate,
  ) 
df2_recent
df2
df2 %>% 
  arrange(desc(date)) %>%
  head(14)
df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    `Day` = date,
    `📖` = post_cfm_study,
    `🙏🏻` = post_gratitude,
    `🛐` = pray,
    `🚴🏻‍♂️` = cardio,
    `🏋🏼‍♂️` = strength,
    `🧘🏼‍♂️` = meditate,
  ) 
df2
df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    date, post_cfm_study, post_gratitude, pray, cardio, strength, meditate
  )
df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    date, post_cfm_study, post_gratitude, pray, cardio, strength, meditate
  ) %>%
  rename(
    `Day` = date,
    `📖` = post_cfm_study,
    `🙏🏻` = post_gratitude,
    `🛐` = pray,
    `��🏻‍♂️` = cardio,
    `🏋🏼‍♂️` = strength,
    `��🏼‍♂️` = meditate,
  ) 
df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    date, post_cfm_study, post_gratitude, pray, cardio, strength, meditate
  )
df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    date, post_cfm_study, post_gratitude, pray, cardio, strength, meditate
  ) %>%
  rename(
    `Day` = date,
    `📖` = post_cfm_study,
    `🙏🏻` = post_gratitude,
    `🛐` = pray,
    `��🏻‍♂️` = cardio,
    `🏋🏼‍♂️` = strength,
    `��🏼‍♂️` = meditate,
  ) 
df2_recent <- df2 %>% 
  arrange(desc(date)) %>%
  head(14) %>%
  select(
    `Day` = date,
    `📖` = post_cfm_study,
    `🙏🏻` = post_gratitude,
    `🛐` = pray,
    `🚴🏻‍♂️` = cardio,
    `🏋🏼‍♂️` = strength,
    `🧘🏼‍♂️` = meditate,
  ) 
# Assuming your data frame is named 'data'
# First, convert the 'Day' column to the desired format
df2_recent$Day <- format(as.Date(df2_recent$Day), "%a %b %d")
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    method = "numeric",
    palette = c("white", "darkgreen"),
    domain = c(0, 1)
  ) %>%
  tab_header(
    title = "Daily Habits"
  ) |>
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  ) %>%
  tab_footnote(
    footnote = "📖: Study, 🙏🏻: Gratitude, 🛐: Pray, 🚴🏻‍♂️: Cardio, 🏋🏼‍♂️: Strength, 🧘🏼‍♂️: Meditate",
    locations = cells_column_labels(columns = everything())
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    method = "numeric",
    palette = c("white", "darkgreen"),
    domain = c(0, 1)
  ) %>%
  tab_header(
    title = "Daily Habits"
  ) |>
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  ) %>%
  tab_caption(
    caption = "📖: Study, 🙏🏻: Gratitude, 🛐: Pray, 🚴🏻‍♂️: Cardio, 🏋🏼‍♂️: Strength, 🧘🏼‍♂️: Meditate",
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    method = "numeric",
    palette = c("white", "darkgreen"),
    domain = c(0, 1)
  ) %>%
  tab_header(
    title = "Daily Habits"
  ) |>
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  ) %>%
  tab_caption(
    caption = md("📖: Study, ��🏻: Gratitude, 🛐: Pray, 🚴🏻‍♂️: Cardio, 🏋🏼‍♂️: Strength, 🧘🏼‍♂️: Meditate"),
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    method = "numeric",
    palette = c("white", "darkgreen"),
    domain = c(0, 1)
  ) %>%
  tab_header(
    title = "Daily Habits"
  ) |>
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  ) %>%
  tab_caption(md("📖: Study, 🙏🏻: Gratitude, 🛐: Pray, 🚴🏻‍♂️: Cardio, 🏋🏼‍♂️: Strength, 🧘��‍♂️: Meditate")
  )
df2_recent %>%
  gt(id='mygt', rowname_col = "Day") %>%
  data_color(
    method = "numeric",
    palette = c("white", "darkgreen"),
    domain = c(0, 1)
  ) %>%
  tab_header(
    title = "Daily Habits"
  ) |>
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  ) %>%
  cols_align(align = "center") %>%
  tab_style(
    style = cell_borders(sides = "right", color = "white", weight = px(1)),
    locations = cells_body(columns = everything())
  ) %>%
  cols_width(
    Day ~ px(100),
    everything() ~ px(50),
  ) %>%
  tab_source_note(md("📖: Study, 🙏🏻: Gratitude, 🛐: Pray, 🚴🏻‍♂️: Cardio, 🏋🏼‍♂️: Strength, 🧘🏼‍♂️: Meditate")
  )
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(gt)
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # Anything that's a vector should be listed and collapsed
  list_fields <- names(yaml_data)[sapply(yaml_data, function(x) is.vector(x) && length(x) > 1)]
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
# add gratitude
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # print(file)
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
df$date <- lubridate::parse_date_time(df$date, orders = c("ymd", "ymd HMS", "ymd HM", "ymdHMS", "ymdHM"))
df$date <- as.Date(df$date)
for(col in c('run-dist', 'hike-dist', 'jumprope-time')){
  if(!(col %in% colnames(df))){
    df[[col]] <- 0
  }
}
df <- df %>%
  mutate(across(where(is.character), ~ifelse(. == 'x', NA, .)))
df <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude',
    pelo = ifelse(`pelo-time` > 0, 1, 0),
    cardio = ifelse(`pelo-time` > 0 | `run-dist` > 0 | `hike-dist` > 0 | `jumprope-time` > 0, 1, 0),
    strength = ifelse(!is.na(exercises) >= 1, 1, 0)
  ) %>%
  filter(title != "test")
# df2 = daily df
df2 <- df %>%
  select(
    date, pray, meditate, cardio, strength, post_cfm_study, post_gratitude
  ) %>% 
  mutate(across(-date, as.numeric)) %>%
  mutate(across(-date, ~replace_na(., 0))) %>%
  group_by(date) %>%
  summarize_all(max) %>%
  ungroup() %>%
  arrange(desc(date))
df3 <- df2 %>% 
  rowwise() %>%
  mutate(total_goals = sum(pray, meditate, strength, cardio, post_cfm_study, post_gratitude)) %>%
  ungroup() %>%
  select(date, total_goals) %>%
  mutate(week_of_year = lubridate::week(date),
         day_of_week = lubridate::wday(date, label = TRUE)) 
df3
ggplot(df3, aes(x = week_of_year, y = day_of_week, fill = total_goals)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +  # Adjust these values as needed to shrink the tiles
  scale_fill_gradient(low = "white", high = "darkgreen", limits = c(1, 6)) +
  labs(x = "Week of the Year", y = "Day of Week", fill='Count') +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.ticks = element_blank())
df
df$date == NA
is.na(df$date)
df[is.na(df$date)]
df[is.na(df$date),]
df3
df3$day_of_week
# list_fields = c('categories', 'body-zones', 'exercies')
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # Anything that's a vector should be listed and collapsed
  list_fields <- names(yaml_data)[sapply(yaml_data, function(x) is.vector(x) && length(x) > 1)]
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
# add gratitude
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # print(file)
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
df$date <- lubridate::parse_date_time(df$date, orders = c("ymd", "ymd HMS", "ymd HM", "ymdHMS", "ymdHM")) 
df$date <- as.Date(df$date)
# add missing columsn
for(col in c('run-dist', 'hike-dist', 'jumprope-time')){
  if(!(col %in% colnames(df))){
    df[[col]] <- 0
  }
}
# fill in missing defaults, characters are set to 'x' by default in _day journal
df <- df %>%
  mutate(across(where(is.character), ~ifelse(. == 'x', NA, .)))
# Create "cardio" and "strength" flags
df <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude',
    pelo = ifelse(`pelo-time` > 0, 1, 0),
    cardio = ifelse(`pelo-time` > 0 | `run-dist` > 0 | `hike-dist` > 0 | `jumprope-time` > 0, 1, 0),
    strength = ifelse(!is.na(exercises) >= 1, 1, 0)
  ) %>%
  filter(title != "test")
# df2 = daily df
df2 <- df %>%
  select(
    date, pray, meditate, cardio, strength, post_cfm_study, post_gratitude
  ) %>% 
  mutate(across(-date, as.numeric)) %>%
  mutate(across(-date, ~replace_na(., 0))) %>%
  group_by(date) %>%
  summarize_all(max) %>%
  ungroup() %>%
  arrange(desc(date))
df3 <- df2 %>% 
  rowwise() %>%
  mutate(total_goals = sum(pray, meditate, strength, cardio, post_cfm_study, post_gratitude)) %>%
  ungroup() %>%
  select(date, total_goals) %>%
  mutate(week_of_year = lubridate::week(date),
         day_of_week = lubridate::wday(date, label = TRUE)) 
df3$day_of_week
ggplot(df3, aes(x = week_of_year, y = day_of_week, fill = total_goals)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +  # Adjust these values as needed to shrink the tiles
  scale_fill_gradient(low = "white", high = "darkgreen", limits = c(1, 6)) +
  labs(x = "Week of the Year", y = "Day of Week", fill='Count') +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.ticks = element_blank())
ggplot(df3, aes(x = week_of_year, y = day_of_week, fill = total_goals)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +  # Adjust these values as needed to shrink the tiles
  scale_fill_gradient(low = "white", high = "darkgreen", limits = c(1, 6)) +
  labs(x = "Week of the Year", y = "Day of Week", fill='Count') +
  scale_y_discrete(limits = rev(levels(df3$day_of_week))) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.ticks = element_blank())
