df2[df2 == -Inf] <- 0
f2[df2 == -Inf]
                                                                      ardio, post_cfm_study, p                  rm = TRUE)) %>%
  ungroup() %>%
  select(date, total_goals) %>%
  mutate(week_of_year = lubridate::week(date),
         day_of_week = lubridate::wday(date, label = TRUE)) 
ggplot(df3, aes(x = week_of_year, y = day_of_week, fill = total_goals)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +  # Adjust these values as needed to shrink the tiles
  scale_fill_gradient(lo  scale_te", high = "darkgreen", limits = c(1, 6)) +
  labs(x = "Week of the Year", y = "Day of  labs(x = "Week of the Year", y = "Day of  labs(x = "Week of the Year"nt  labs(x = "Week of the Year", y = "Day of  labs(x = "Week of the Year",,
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.ticks = element_blank())
library(dplyr)
library(ggplot2)
list_fields = c('categories')
extract_yaml_to_df <- function(file) {
  # file = "christianity/three-little-pigs-christ.md"  
  # cat("Reading file", file)
  file_content <- readLines(file)
  yaml_lines <- grep("---", file_content)
  yaml_start <- yaml_lines[1] + 1
  yaml_end <- yaml_lines[2] - 1
  # yaml content
  yaml_list <- file_content[(yaml_start):(yaml_end)]
  yaml_text = paste(yaml_list, collapse = "\n")
  yaml_data <- yaml::read_yaml(text=yaml_text)
  yaml_data
  # parse any lists
  for(field in list_fields){
    yaml_data[field] = paste(unlist(yaml_data[field]), collapse=", ")
  }
  return(tibble::as_tibble(yaml_data))
}
# add gratitude
dirs <- c('goals', 'gratitude', "christianity")
df <- tibble::tibble()
for(dir in dirs){
  files <- list.files(path = dir, pattern = "*.md", full.names = TRUE)
  for(file in files){
    # convert to df
    df_new <- extract_yaml_to_df(file) 
    df_new$folder = dir
    df <- bind_rows(df, df_new)
  }
}
df$date <- lubridate::parse_date_time(df$date, orders = c("ymd", "ymd HMS", "ymd HM", "ymdHMS", "ymdHM")) 
df$date <- as.Date(df$date)
df2 <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude'
    ) %>%
  select(
    date, pray, meditate, strength, cardio, post_cfm_study, post_gratitude
  ) %>% 
  group_by(date) %>%
  summarize(
    pray=max(pray, na.rm=T), 
    meditate=max(meditate, na.rm=T), 
    cardio = max(cardio, na.rm=T), 
    strength=max(strength, na.rm=T), 
    post_cfm_study=max(post_cfm_study, na.rm=T), 
    post_gratitude=max(post_gratitude, na.rm=T)
  ) %>%
  tidyr::replace_na(list(pray=0, meditate=0, strength=0, cardio=0, post_cfm_study=0, post_gratitude=0))
df2[df2 == -Inf] <- 0
df3 <- df2 %>% 
  rowwise() %>%
  mutate(total_goals = sum(pray, meditate, strength, cardio, post_cfm_study, post_gratitude, na.rm = TRUE)) %>%
  ungroup() %>%
  select(date, total_goals) %>%
  mutate(week_of_year = lubridate::week(date),
         day_of_week = lubridate::wday(date, label = TRUE)) 
df2
df2_recent <- df2 %>% 
  filter(date >= max(date) - 13) %>%
  gather(goal, value, -date) %>%
  arrange(desc(date), desc(goal))
df2_recent
df2 %>% 
  filter(date >= max(date) - 13) %>%
  gather(goal, value, -date) %>%
  arrange(desc(date), desc(goal))
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date), desc(goal))
df2
df2
df2 <- df %>% 
  mutate(
    post_cfm_study = stringr::str_detect(categories, 'come follow me'),
    post_gratitude = folder == 'gratitude'
    ) %>%
  select(
    date, pray, meditate, strength, cardio, post_cfm_study, post_gratitude
  ) %>% 
  group_by(date) %>%
  summarize(
    pray=max(pray, na.rm=T), 
    meditate=max(meditate, na.rm=T), 
    cardio = max(cardio, na.rm=T), 
    strength=max(strength, na.rm=T), 
    post_cfm_study=max(post_cfm_study, na.rm=T), 
    post_gratitude=max(post_gratitude, na.rm=T)
  ) %>%
  tidyr::replace_na(list(pray=0, meditate=0, strength=0, cardio=0, post_cfm_study=0, post_gratitude=0))
df2[df2 == -Inf] <- 0
df2
df2 %>% 
  filter(date >= max(date) - 13)
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date), desc(goal))
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date))
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  rename(
    pray=`Pray`
  )
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  rename(
    `Pray`=pray
  )
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude
    `Cardio` = cardio,
    `Strength` = strength
  )
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  )
df2_recent <- df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  )
df2_recent <- df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  ) %>%
  tidry::pivot_longer(
    cols = c(`Pray`, `Meditate`, `Study Post`, `Gratitude Post`, `Cardio`, `Strength`),
    names_to = "goal",
    values_to = "value"
  )
df2_recent <- df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  ) %>%
  tidyr::pivot_longer(
    cols = c(`Pray`, `Meditate`, `Study Post`, `Gratitude Post`, `Cardio`, `Strength`),
    names_to = "goal",
    values_to = "value"
  )
df2_recent
ggplot(df2_recent, aes(x = date, y = goal, fill = value)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +
  scale_fill_gradient(low = "white", high = "darkgreen", limits = c(0, 1)) +
  labs(x = "Date", y = "Goal", fill='Count') +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.ticks = element_blank())
df2_recent
df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  )
renv::install('gt')
renv::snapshot()
  pivot_longer(
    cols = -Day,
    names_to = "Activity",
    values_to = "Completed"
  )
df2_recent <- df2 %>% 
  filter(date >= max(date) - 13) %>%
  arrange(desc(date)) %>%
  select(
    `Day` = date,
    `Pray`=pray,
    `Meditate` = meditate,
    `Study Post` = post_cfm_study,
    `Gratitude Post` = post_gratitude,
    `Cardio` = cardio,
    `Strength` = strength
  ) 
df_recent$Day <- format(as.Date(data$Day), "%a %b %d")
df_recent$Day <- format(as.Date(df_recent$Day), "%a %b %d")
df2_recent$Day <- format(as.Date(df2_recent$Day), "%a %b %d")
df2_recent
data_long <- df_recent %>% 
  tidyr::pivot_longer(
    cols = -Day,
    names_to = "Activity",
    values_to = "Completed"
  )
data_long <- df2_recent %>% 
  tidyr::pivot_longer(
    cols = -Day,
    names_to = "Activity",
    values_to = "Completed"
  )
data_long
# Create a gt table
gt_table <- data_long %>%
  gt(rowname_col = "Day", groupname_col = "Activity") %>%
  tab_style(
    style = cell_fill(color = "darkgreen"),
    locations = cells_body(
      columns = vars(Completed),
      rows = Completed == 1
    )
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(
      columns = vars(Completed),
      rows = Completed == 0
    )
  ) %>%
  cols_label(
    Completed = "Accomplished"
  )
library(gt)
gt_table <- data_long %>%
  gt(rowname_col = "Day", groupname_col = "Activity") %>%
  tab_style(
    style = cell_fill(color = "darkgreen"),
    locations = cells_body(
      columns = vars(Completed),
      rows = Completed == 1
    )
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(
      columns = vars(Completed),
      rows = Completed == 0
    )
  ) %>%
  cols_label(
    Completed = "Accomplished"
  )
print(gt_table)
data %>%
  gt(rowname_col = "Day") %>%
  # Apply green color for cells where value is 1
  data_color(
    columns = starts_with("Pray"):starts_with("Strength"),
    colors = scales::col_bin(
      bins = c(0, 1), 
      palette = c("white", "darkgreen"), 
      domain = NULL
    )
  )
df2_recent$Day <- format(as.Date(df2_recent$Day), "%a %b %d")
df2_recent %>%
  gt(rowname_col = "Day") %>%
  # Apply green color for cells where value is 1
  data_color(
    columns = starts_with("Pray"):starts_with("Strength"),
    colors = scales::col_bin(
      bins = c(0, 1), 
      palette = c("white", "darkgreen"), 
      domain = NULL
    )
  )
df2_recent
df2_recent %>%
  gt(rowname_col = "Day") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = num,
      rows = num >= 5000
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
    # Iterate over each goal column to apply the style
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$Pray == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Pray))
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$Meditate == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Meditate))
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$`Study Post` == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(`Study Post`))
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$`Gratitude Post` == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(`Gratitude Post`))
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$Cardio == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Cardio))
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$Strength == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Strength))
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
    # Iterate over each goal column to apply the style
  tab_style(
    style = list(
      cell_fill(color = ifelse(data$Pray == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Pray))
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
    # Iterate over each goal column to apply the style
  tab_style(
    style = list(
      cell_fill(color = ifelse(df2_recent$Pray == 1, "darkgreen", "white")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(columns = vars(Pray))
  ) 
ifelse(df2_recent$Pray == 1, "darkgreen", "white")
df2_recent %>%
  gt(rowname_col = "Day") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = all_of(column_range),
      rows = rowSums(. >= 1) >= 1  # assuming you want to color the row if any of the columns 2:6 have a value >= 1
    )
  ) 
df2_recent
tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = all_of(2:7),
      rows = rowSums(. >= 1) >= 1  # assuming you want to color the row if any of the columns 2:6 have a value >= 1
    )
  ) 
df2_recent %>%
  gt(rowname_col = "Day") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = all_of(2:7),
      rows = rowSums(. >= 1) >= 1  # assuming you want to color the row if any of the columns 2:6 have a value >= 1
    )
  ) 
df2_recent %>%
  gt(rowname_col = "Day") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = all_of(2:7),
      rows = rowSums(sapply(df2_recent[,2:7], function(x) x > 1)) >= 1
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  tab_style(
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      columns = vars(2:7),
      rows = apply(df2_recent[, 2:7], 1, function(x) any(x > 1))
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = vars(column_name),  # replace 'column_name' with your column name
    colors = scales::col_bin(
      bins = c(1, 1),  # specifying the bin for value '1'
      palette = c("darkgreen"),  # specifying the color
      domain = NULL
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace 'column_name' with your column name
    colors = scales::col_bin(
      bins = c(1, 1),  # specifying the bin for value '1'
      palette = c("darkgreen"),  # specifying the color
      domain = NULL
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace 'column_name' with your column name
    colors = scales::col_bin(
      bins = c(0, 1),  # specifying the bin for value '1'
      palette = c("darkgreen"),  # specifying the color
      domain = NULL
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace 'column_name' with your column name
    colors = scales::col_bin(
      bins = c(0, 1),  # specifying the bin for value '1'
      palette = c("white", "darkgreen"),  # specifying the color
      domain = NULL
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  )
df2_recent %>%
  gt(rowname_col = "Day") %>%
  data_color(
    columns = c(2:7),  # replace with the actual column indices or names
    colors = scales::col_bin(
      bins = c(-Inf, 0.5, Inf),  # defining bins to separate 0 and 1
      palette = c("white", "darkgreen"),  # white for 0, dark green for 1
      domain = NULL
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(color = "transparent")
    ),
    locations = cells_body(
      columns = c(2:7)  # replace with the actual column indices or names
    )
  )
